# Generated by Django 5.2.3 on 2025-06-19 14:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("phone_number", models.CharField(blank=True, max_length=15)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        default="profile_pics/default.jpg",
                        upload_to="profile_pics/",
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        blank=True,
                        help_text="Height in centimeters",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "current_weight",
                    models.FloatField(
                        blank=True,
                        help_text="Current weight in kilograms",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(500),
                        ],
                    ),
                ),
                (
                    "activity_level",
                    models.CharField(
                        choices=[
                            ("sedentary", "Sedentary (little/no exercise)"),
                            ("light", "Lightly active (light exercise 1-3 days/week)"),
                            (
                                "moderate",
                                "Moderately active (moderate exercise 3-5 days/week)",
                            ),
                            ("active", "Very active (hard exercise 6-7 days/week)"),
                            (
                                "extra",
                                "Extra active (very hard exercise, physical job)",
                            ),
                        ],
                        default="moderate",
                        max_length=20,
                    ),
                ),
                (
                    "blood_group",
                    models.CharField(
                        choices=[
                            ("A+", "A Positive"),
                            ("A-", "A Negative"),
                            ("B+", "B Positive"),
                            ("B-", "B Negative"),
                            ("AB+", "AB Positive"),
                            ("AB-", "AB Negative"),
                            ("O+", "O Positive"),
                            ("O-", "O Negative"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                (
                    "known_allergies",
                    models.TextField(
                        blank=True,
                        help_text="List any known allergies (food, medication, environmental)",
                    ),
                ),
                (
                    "medical_conditions",
                    models.TextField(
                        blank=True,
                        help_text="List any chronic conditions, diseases, or ongoing medical issues",
                    ),
                ),
                (
                    "current_medications",
                    models.TextField(
                        blank=True, help_text="List current medications and dosages"
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_relationship",
                    models.CharField(blank=True, max_length=50),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=15),
                ),
                (
                    "emergency_contact_email",
                    models.EmailField(blank=True, max_length=254),
                ),
                ("insurance_provider", models.CharField(blank=True, max_length=100)),
                (
                    "insurance_policy_number",
                    models.CharField(blank=True, max_length=50),
                ),
                ("preferred_hospital", models.CharField(blank=True, max_length=200)),
                ("primary_doctor_name", models.CharField(blank=True, max_length=100)),
                ("primary_doctor_phone", models.CharField(blank=True, max_length=15)),
                (
                    "profile_visibility",
                    models.BooleanField(
                        default=True,
                        help_text="Make basic profile information visible to healthcare providers",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "accounts_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserHealthProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "primary_goal",
                    models.CharField(
                        choices=[
                            ("weight_loss", "Weight Loss"),
                            ("weight_gain", "Weight Gain"),
                            ("muscle_gain", "Muscle Gain"),
                            ("fitness", "General Fitness"),
                            ("health", "Health Maintenance"),
                            ("recovery", "Recovery/Rehabilitation"),
                        ],
                        default="health",
                        max_length=20,
                    ),
                ),
                ("target_weight", models.FloatField(blank=True, null=True)),
                ("daily_calorie_target", models.IntegerField(blank=True, null=True)),
                (
                    "daily_water_target",
                    models.FloatField(
                        default=8.0, help_text="Target water intake in glasses"
                    ),
                ),
                ("target_steps_per_day", models.IntegerField(default=10000)),
                ("target_exercise_minutes_per_week", models.IntegerField(default=150)),
                ("medication_reminders", models.BooleanField(default=True)),
                ("appointment_reminders", models.BooleanField(default=True)),
                ("health_tips", models.BooleanField(default=True)),
                ("weekly_reports", models.BooleanField(default=True)),
                ("share_data_with_doctor", models.BooleanField(default=False)),
                ("allow_health_insights", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Health Profile",
                "verbose_name_plural": "User Health Profiles",
                "db_table": "accounts_user_health_profile",
            },
        ),
    ]
